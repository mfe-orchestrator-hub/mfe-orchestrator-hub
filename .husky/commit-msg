#!/bin/sh

# ANSI color codes
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m' # No Color

# Conventional commit guidelines URLs
CONVENTIONAL_COMMITS_URL="https://www.conventionalcommits.org/en/v1.0.0/#summary"
GIT_COMMIT_GUIDELINES_URL="https://chris.beams.io/posts/git-commit/#limit-50"

# Function to validate the commit type
validate_commit_type() {
    local commit_type="$1"
    case "$commit_type" in
        feat|fix|chore|docs|test|style|refactor|perf|build|ci|revert) return 0 ;;
        *) return 1 ;;
    esac
}

# Function to validate the commit message format
validate_commit_message_format() {
    local commit_message="$1"
    if echo "$commit_message" | grep -qE "^(feat|fix|chore|docs|test|style|refactor|perf|build|ci|revert)(\(.+?\))?: .{1,}$"; then
        return 0
    else
        return 1
    fi
}

# Function to check commit message length
validate_commit_message_length() {
    local commit_message="$1"
    if echo "$commit_message" | grep -qE "^.{1,80}$"; then
        return 0
    else
        return 1
    fi
}

# Function to validate scope format
validate_scope_format() {
    local commit_message="$1"
    if echo "$commit_message" | grep -qE "^\w+(\([^)]+\))?: .{1,}$"; then
        return 0
    else
        return 1
    fi
}

# Read the first line of the commit message
commit_message=$(head -1 "$1")

# Validate commit message format
if ! validate_commit_message_format "$commit_message"; then
    echo "${RED}ðŸš¨ Commit failed. Your commit message is invalid. The commit message must start with one of the following keywords: feat, fix, chore, docs, test, style, refactor, perf, build, ci, revert, followed by a descriptive text. For more information, refer to: ${CONVENTIONAL_COMMITS_URL}${NC}" >&2
    exit 1
fi

# Check if commit message length is within limit
if ! validate_commit_message_length "$commit_message"; then
    echo "${RED}ðŸš¨ Commit failed. Your commit message is too long. The summary line should contain a maximum of 50 characters. For more information, refer to: ${GIT_COMMIT_GUIDELINES_URL}${NC}" >&2
    exit 1
fi

# Check if scope (if present) follows a specific format or matches predefined values
if ! validate_scope_format "$commit_message"; then
    echo "${RED}ðŸš¨ Commit failed. Invalid scope format. If you include a scope, it should follow a specific format or match predefined values. For more information, refer to: ${CONVENTIONAL_COMMITS_URL}#scope${NC}" >&2
    exit 1
fi

# If all checks pass
echo "${GREEN}âœ… Commit message is valid!${NC}"
exit 0
